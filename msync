#!/usr/bin/env php
<?php
/**
 * msync
 * Synchronize directories like rsync but with an additional manifest so that
 * changes on the remote system are caught before damage is done.
 *
 * Written using MacOS 13.1 Ventura for the local workstation and
 * connecting to a server running Debian 10.
 */

use Model\Exceptions\HelpException;
use Model\Exceptions\NotInitializedException;
use Model\Manifest;
use Model\Opts;
use Model\Report;
use Model\Sync;

ini_set('error_reporting', E_ALL);

require 'vendor/diskerror/autoload/autoload.php';

const DATA_DIR      = '.msync/';
const MANIFEST_FILE = DATA_DIR . 'manifest.db';
const CONFIG_FILE   = DATA_DIR . 'config.ini';
const TEMP_DIR      = DATA_DIR . 'temp/';

const USAGE = <<<'DEFINE_USAGE'
Usage:
	msync -H | --help
	msync [option [option [...]]] init | check | pull | push | resolve

DEFINE_USAGE;

$exitCode = 0;

////////////////////////////////////////////////////////////////////////////////////////////////////
//	MAIN

try {
	$opts = new Opts(CONFIG_FILE);
	
	$manifestFullPath = $opts->localPath . '/' . MANIFEST_FILE;

	if (!isset($argv[$opts->restIndex])) {
		fprintf(STDERR, USAGE . PHP_EOL);
		exit(1);
	}

	ini_set('memory_limit', '512M');

	if (!is_dir(DATA_DIR)) {
		mkdir(DATA_DIR);
	}

	//  Do command verb.
	switch ($argv[$opts->restIndex]) {
		case 'init':
			$report = new Report($opts->verbose);
			if (file_exists($manifestFullPath)) {
				$cont = 'no';   //  default reply
				$report->scream('This is an msync managed directory!');
				$report->scream('Do you wish to overwrite all working files? [y|N]:', false);
				if ($rline = readline(' ')) {
					$cont = $rline;
				}

				if (substr(strtolower($cont), 0, 1) !== 'y') {
					$report->out(STDOUT, 'Canceled.' . PHP_EOL);
					break;
				}
			}

			$report->out('Opening connection to remote server.');
			$sync = new Sync($opts);

			$report->out('Retrieving remote file list.');
			$remoteArray = $sync->getRemoteList();

			$report->out('Pulling new or different files.');
			$sync->pullFiles($remoteArray);

			$report->out('Writing file info to manifest.');
			(new Manifest($manifestFullPath, $opts))->firstWrite($remoteArray);

			$report->out('Initialization complete.');
			break;


		case 'check':
			if (!file_exists($manifestFullPath)) {
				throw new NotInitializedException();
			}

			$sync        = new Sync($opts);
			$remoteArray = $sync->getRemoteList();
			$devArray    = $sync->getDevList();
			//  TODO: finish
			break;


		case 'push':
			if (!file_exists($manifestFullPath)) {
				throw new NotInitializedException();
			}

			$sync = new Sync($opts);
			//  TODO: finnish this
			break;


		case 'pull':
			if (!file_exists($manifestFullPath)) {
				throw new NotInitializedException();
			}

			$sync        = new Sync($opts);
			$remoteArray = $sync->getRemoteList();
			$devArray    = $sync->getDevList();
			//  TODO: finnish this


//			$fp = fopen('/Users/reid/Desktop/ct_remote.txt', 'wb');
//			ftruncate($fp, 0);
//			foreach ($remoteArray as $e) {
//				fprintf($fp, "%s; size: %u\n",
//					$e['name'], $e['size']);
//			}
//			fclose($fp);
//
//			$fp = fopen('/Users/reid/Desktop/ct_dev.txt', 'wb');
//			ftruncate($fp, 0);
//			foreach ($devArray as $e) {
//				fprintf($fp, "%s; size: %u\n",
//					$e['name'], $e['size']);
//			}
//			fclose($fp);
//			return;


			reset($remoteArray);
			reset($devArray);

			$re = current($remoteArray);
			$de = current($devArray);

			$onlyOnRemote = [];
			$onlyOnDev    = [];
			$timeDiffers  = [];
			$sizeDiffers  = [];

			do {
				if ($re['fname'] < $de['fname']) {
					$onlyOnRemote[] = $re;
					//		printf("Only on remote: %s; size: %u; mod time: %s\n",
					//			$re['fname'], $re['sizeb'], date('Y-m-d H:i:s', $re['modts']));
					$re = next($remoteArray);
					continue;
				}
				elseif ($re['fname'] > $de['fname']) {
					$onlyOnDev[] = $de;
					//		printf("Only in dev: %s; size: %u; mod time: %s\n",
					//			$de['name'], $de['size'], date('Y-m-d H:i:s', $de['time']));
					$de = next($devArray);
					continue;
				}
				elseif ($re['modts'] !== $de['modts']) {
					$timeDiffers[] = [
						'file name'   => $de['fname'],
						'dev time'    => $de['modts'],
						'remote time' => $re['modts'],
					];
					//		printf("Different mod times: %s; dev mod time: %s; remote mod time: %s\n",
					//			$de['fname'], date('Y-m-d H:i:s', $de['modts']), date('Y-m-d H:i:s', $re['modts']));
				}
				elseif ($re['size'] !== $de['size']) {
					$sizeDiffers[] = [
						'file name'   => $de['fname'],
						'dev size'    => $de['sizeb'],
						'remote size' => $re['sizeb'],
					];
					//		printf("DIFFERENT SIZES: %s; dev size: %u; remote size: %u\n",
					//			$de['fname'], $de['sizeb'], $re['sizeb']);
				}

				$re = next($remoteArray);
				$de = next($devArray);
			} while ($re !== false && $de !== false);


			printf("\nOnly on remote:\n");
			foreach ($onlyOnRemote as $or) {
				printf("%s\n", $or['fname']);
			}

			printf("\nOnly in dev:\n");
			foreach ($onlyOnDev as $od) {
				printf("%s\n", $od['fname']);
			}

			printf("\nTimes differ (later time):\n");
			foreach ($timeDiffers as $td) {
				printf("%s (%s)\n", $td['file name'], $td['dev time'] > $td['remote time'] ? 'dev' : 'remote');
			}

			printf("\nSizes differ:\n");
			foreach ($sizeDiffers as $sd) {
				printf("%s\n", $sd['file name']);
			}
			break;

		default:
			fprintf(STDERR, USAGE);
			exit(1);
	}
}
catch (HelpException $e) {
	fprintf(STDOUT, USAGE);
	fprintf(STDOUT, file_get_contents('help_page.txt'));
}
catch (NotInitializedException $e) {
	$r = new Report($opts->verbose);
	$r->scream('This is not an msync managed directory.');
	$r->scream('Use ‘msync init’ to create local workspace.');
	$exitCode = 1;
}
catch (RuntimeException $e) {
	$r = new Report($opts->verbose);
	$r->scream($e->getMessage());
	$exitCode = $e->getCode();
}
catch (Throwable $t) {
	fprintf(STDERR, $t);
	$exitCode = $t->getCode();
}

exit($exitCode);
