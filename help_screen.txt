DESCRIPTION

Ever upload a file to the server and overwrite someone else's changes. Right,
shouldn't happen. Proper project organizing and communication protocols should
be clear and enforced.

But this can still happen with products like [SuiteCRM](https://suitecrm.com)
where code is generated by other parts of the package and not just for caching.
A "cache/" directory being a well defined and known place where files will often
be overwritten. Frontend users might have no idea that these code changes are
happening within the web-root directory.

MSync performs the same as simple usage of `rsync` but adds a manifest file.
That file holds the state of the desired files at the time of last sync. The re-
mote connection is handled by [phpseclib](https://phpseclib.com). The status of
both the remote and local directories are compared against the manifest. File
differences are detected with hash strings generated from the remote and local
contents of code text files. Graphics files are uploaded or downloaded only if
their sizes or mod times differ.

There are three different regex strings generated from the users preferences.
One is used to block files from upload and download. This is intended to prevent
MSync from seeing business data files at all such as PDF, MS Word documents, and
log files stored within the web-root. The second is used to prevent hashing of
the files. The default values refer to a number of graphics file formats. The
third regex string is used for so that some files are only pulled from the re-
mote directory. These might be cached executable script files that might be ne-
cessary for step debugging. Any changes to those files might have unpredictable
affect on the running site.


VERBS

	init:
		Uses RSYNC to copy remote directory into the current or speci-
		fied directory. If there are files in the target directory then
		only new or changed files are copied. Nothing is deleted.

	pull:
		Pull new files from remote directory. If a file has been changed
		locally then the changed file will be placed into a temporary
		directory for the user to check and merge changes and a conflict
		will be recorded for that file.

	push:
		Push changed files to remote directory. If any file in the re-
		mote directory has changed since 'check' was last run the file
		conflict has not been resolved then no files are copied and a
		warning message is displayed. Empty directories are not recreat-
		ed in remote directory.

	resolve:
		Removes conflict mark from file. The local file will now over-
		write the same file in the remote directory during the next
		push. This verb requires a relative path to file.

	conflicted:
		List files that are in conflict.


OPTIONS:

	-H, --help
		This screen.

	-d, --directory
		Specify the local working directory instead of the current work-
		ing directory.

	-h, --host
		Remote host name or IP address. This will override the setting
		in the config file.

	-p, --password
		[This is not implimented. Only SSH keypair implemented.]
		Specify a password to log into the remote system. If there is no
		password then the user's ssh key, "~/.ssh/id_rsa" is used.

	-u, --username
		Overrides the username set in the config file.

	--diff-tool
		Users choice of diff utility. Default is `phpstorm diff`. But
		another possibility is `bbdiff' or just `diff`.


CONFIG FILES
The configuration file is in INI style and kept in the local working directory
in a hidden directory named ".msync/config.ini". Their usage should be clear.

host       = 192.168.1.77
remotePath = /var/www/html
user       =
group      = www-data
sshKeyPath = ~/.ssh/id_rsa
password   =
diffTool   = bbdiff

The config files containing the REGEX of files-to-ignore will require expla-
nation (soon). For now, see sample testing data in those files.
SampleConfigs/alwaysIgnore.txt
SampleConfigs/initFilter.rsync
SampleConfigs/neverHash.txt
SampleConfigs/neverPush.txt


